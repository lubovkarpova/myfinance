"""
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤
"""
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

import config
from google_sheets import GoogleSheetsManager
from openai_categorizer import TransactionCategorizer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
sheets_manager = None
categorizer = None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    welcome_message = f"""
Hey {user.first_name}! üëã
I'm your money tracker bot. Just drop me messages like:

"Bought groceries 1500‚ÇΩ"
"300‚ÇΩ on coffee"
"Salary 50k"
"+5k freelance"

I'll stash them till you run /process.

üõ† Commands:
/start ‚Äì This intro
/process ‚Äì Parse all messages, send to Google Sheets
/clear ‚Äì Wipe the message buffer
/table ‚Äì Get your Sheets link
/stats ‚Äì See what's saved
/help ‚Äì Quick guide
"""
    await update.message.reply_text(welcome_message)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üëæ How to use me:

Send spendings/incomes in plain text
Run /process once you've sent a few
I'll sort them and log everything to Google Sheets

üí¨ Examples:
"500‚ÇΩ groceries"
"Coffee 200"
"Taxi 1k"
"Salary 60k"
"+3k freelance"

üß∞ Commands:
/start ‚Äì Intro
/process ‚Äì Log stuff
/clear ‚Äì Clean up messages
/table ‚Äì Your Sheets link
/stats ‚Äì What's saved
/help ‚Äì You're here

Got questions? Just text me what you spent. I got you.
"""
    await update.message.reply_text(help_text)


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    if 'messages' not in context.user_data:
        context.user_data['messages'] = []
    
    messages_count = len(context.user_data['messages'])
    
    if messages_count == 0:
        await update.message.reply_text("üì≠ Nothing saved yet.")
    else:
        stats_text = f"üìä Stats:\n"
        stats_text += f"Saved: {messages_count} messages\n\n"
        stats_text += "Latest:\n"
        
        for i, msg in enumerate(context.user_data['messages'][-5:], 1):
            stats_text += f"{i}. {msg['text'][:50]}...\n"
        
        stats_text += f"\nRun /process to log them."
    
    await update.message.reply_text(stats_text)


async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—â–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if 'messages' in context.user_data:
        count = len(context.user_data['messages'])
        context.user_data['messages'] = []
        await update.message.reply_text(f"üßπ Cleared {count} messages.")
    else:
        await update.message.reply_text("üì≠ Nothing to clear.")


async def table_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ Google —Ç–∞–±–ª–∏—Ü—É"""
    if sheets_manager and sheets_manager.spreadsheet:
        url = sheets_manager.get_spreadsheet_url()
        await update.message.reply_text(f"üìä Your sheet:\n{url}")
    else:
        await update.message.reply_text("‚ùå Couldn't get the link. Try later.")


async def process_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /process - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user = update.effective_user
    
    if 'messages' not in context.user_data or len(context.user_data['messages']) == 0:
        await update.message.reply_text("üì≠ Nothing to process. Send something first.")
        return
    
    messages = context.user_data['messages']
    await update.message.reply_text(f"‚öôÔ∏è Processing {len(messages)} messages...\nGimme a sec.")
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        transactions = []
        
        for msg_data in messages:
            text = msg_data['text']
            timestamp = msg_data['timestamp']
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
            parsed = categorizer.parse_transaction(text)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transaction = {
                'date': timestamp.strftime('%d-%m-%y'),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–∏—Å—ã –≤–º–µ—Å—Ç–æ —Å–ª—ç—à–µ–π
                'type': parsed['type'],
                'description': parsed['description'],
                'category': parsed['category'],
                'amount': parsed['amount'],
                'currency': parsed.get('currency', 'ILS'),
                'amount_ils': parsed.get('amount_ils', parsed['amount']),
                'username': user.first_name or user.username or 'Unknown'
            }
            
            transactions.append(transaction)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ Google Sheets
        if sheets_manager.add_transactions_batch(transactions):
            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
            context.user_data['messages'] = []
            
            success_message = f"‚úÖ Logged {len(transactions)} transactions!\n\n/table ‚Äì See the sheet"
            await update.message.reply_text(success_message)
        else:
            await update.message.reply_text("‚ùå Couldn't add to the sheet. Try again later.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await update.message.reply_text(f"‚ùå Something went wrong: {str(e)}")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç –∏—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    user = update.effective_user
    text = update.message.text
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'messages' not in context.user_data:
        context.user_data['messages'] = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
    context.user_data['messages'].append({
        'text': text,
        'timestamp': datetime.now()
    })
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    count = len(context.user_data['messages'])
    await update.message.reply_text(
        f"‚úÖ Got it! {count} messages saved.\n\n"
        f"üí° Run /process to log them."
    )


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global sheets_manager, categorizer
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_errors = config.validate_config()
    if config_errors:
        logger.error("–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for error in config_errors:
            logger.error(f"  - {error}")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...")
    sheets_manager = GoogleSheetsManager(
        config.GOOGLE_CREDENTIALS_FILE,
        config.SPREADSHEET_NAME
    )
    
    if not sheets_manager.connect():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets")
        return
    
    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Ç–∞–±–ª–∏—Ü–µ: {sheets_manager.get_spreadsheet_url()}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI categorizer
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI...")
    categorizer = TransactionCategorizer(config.OPENAI_API_KEY)
    logger.info("‚úÖ OpenAI –≥–æ—Ç–æ–≤")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("process", process_command))
    application.add_handler(CommandHandler("clear", clear_command))
    application.add_handler(CommandHandler("table", table_command))
    application.add_handler(CommandHandler("stats", stats_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()

