"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ Google Sheets
"""
import re
from datetime import datetime
from google_sheets import GoogleSheetsManager
from openai_categorizer import TransactionCategorizer
import config

def parse_historical_transaction(text):
    """
    –ü–∞—Ä—Å–∏—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞
    
    Args:
        text: —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "21 –æ–∫—Ç—è–±—Ä—è –∞—Ä–µ–Ω–ª–∞ —Å–∫—É—Ç–µ—Ä–∞ 41"
        
    Returns:
        dict: –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = text.strip()
    
    # –ò—â–µ–º –¥–∞—Ç—É –≤ –Ω–∞—á–∞–ª–µ
    date_match = re.match(r'(\d+)\s+–æ–∫—Ç—è–±—Ä—è', text)
    if not date_match:
        return None
    
    day = date_match.group(1)
    date_str = f"{day}-10-25"  # 2025 –≥–æ–¥
    
    # –£–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
    remaining_text = re.sub(r'^\d+\s+–æ–∫—Ç—è–±—Ä—è\s+', '', text)
    
    # –ò—â–µ–º —Å—É–º–º—É –≤ –∫–æ–Ω—Ü–µ
    amount_match = re.search(r'(\d+(?:\.\d+)?)\s*(–¥–æ–ª–ª–∞—Ä—ã?|—Ä—É–±–ª–µ–π?|‚ÇΩ|$|USD|RUB)?\s*$', remaining_text)
    if not amount_match:
        return None
    
    amount = float(amount_match.group(1))
    currency_hint = amount_match.group(2) if amount_match.group(2) else ''
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É
    currency = 'ILS'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if '–¥–æ–ª–ª–∞—Ä' in currency_hint.lower() or 'usd' in currency_hint.lower():
        currency = 'USD'
    elif '—Ä—É–±–ª' in currency_hint.lower() or '‚ÇΩ' in currency_hint or 'rub' in currency_hint.lower():
        currency = 'RUB'
    
    # –£–±–∏—Ä–∞–µ–º —Å—É–º–º—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
    description_text = re.sub(r'\s+\d+(?:\.\d+)?\s*(–¥–æ–ª–ª–∞—Ä—ã?|—Ä—É–±–ª–µ–π?|‚ÇΩ|USD|RUB)?\s*$', '', remaining_text)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transaction_type = 'Expense'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞—Å—Ö–æ–¥
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ ILS
    exchange_rates = {'ILS': 1.0, 'USD': 3.7, 'EUR': 4.0, 'RUB': 0.04, 'GBP': 4.7}
    amount_ils = round(amount * exchange_rates.get(currency, 1.0), 2)
    
    return {
        'date': date_str,
        'type': transaction_type,
        'description': description_text,
        'category': 'Other',  # –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —á–µ—Ä–µ–∑ GPT
        'amount': amount,
        'currency': currency,
        'amount_ils': amount_ils,
        'username': 'Liuba',
        'input': text,
        'subscription': _parse_subscription(text)
    }

def _parse_subscription(text):
    """
    –ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    
    –õ–æ–≥–∏–∫–∞: –∏—â–µ—Ç —Ü–∏—Ñ—Ä—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ "–ø–æ–¥–ø–∏—Å–∫–∞" (—Å –ø—Ä–æ–±–µ–ª–æ–º –∏–ª–∏ –±–µ–∑).
    –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç - —ç—Ç–æ –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞. –ï—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç - —ç—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (Yes).
    """
    import re
    text_lower = text.lower()
    
    if '–ø–æ–¥–ø–∏—Å–∫–∞' not in text_lower:
        return ''
    
    # –ò—â–µ–º "–ø–æ–¥–ø–∏—Å–∫–∞" –∏ —Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –∏–¥–µ—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–µ–≥–æ
    # –ï—Å–ª–∏ –∏–¥–µ—Ç –ø—Ä–æ–±–µ–ª + –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–∞—è —Ü–∏—Ñ—Ä–∞ (1-9) - —ç—Ç–æ –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä "–ø–æ–¥–ø–∏—Å–∫–∞ 1")
    # –ï—Å–ª–∏ –∏–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞ —Å—Ä–∞–∑—É - —ç—Ç–æ –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä "–ø–æ–¥–ø–∏—Å–∫–∞3")
    # –ï—Å–ª–∏ –∏–¥–µ—Ç –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ —á–∏—Å–ª–æ –Ω–µ —Å—Ä–∞–∑—É - —ç—Ç–æ —Å—É–º–º–∞
    match_immediate = re.search(r'–ø–æ–¥–ø–∏—Å–∫–∞\s+([1-9])\b|–ø–æ–¥–ø–∏—Å–∫–∞([1-9])', text_lower)
    
    if match_immediate:
        # –ù–∞—à–ª–∏ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—É—é —Ü–∏—Ñ—Ä—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ "–ø–æ–¥–ø–∏—Å–∫–∞" - —ç—Ç–æ –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞
        result = match_immediate.group(1) or match_immediate.group(2)
        return result
    else:
        # –ù–µ –Ω–∞—à–ª–∏ - —ç—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        return 'Yes'

def categorize_transactions(transactions, categorizer):
    """
    –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ GPT
    """
    for transaction in transactions:
        try:
            parsed = categorizer.parse_transaction(transaction['input'])
            transaction['category'] = parsed['category']
            transaction['description'] = parsed['description']
            print(f"‚úÖ {transaction['input']} ‚Üí {transaction['category']}")
        except Exception as e:
            print(f"‚ùå Error categorizing {transaction['input']}: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    transactions_text = [
        "21 –æ–∫—Ç—è–±—Ä—è –∞—Ä–µ–Ω–ª–∞ —Å–∫—É—Ç–µ—Ä–∞ 41",
        "22 –æ–∫—Ç—è–±—Ä—è –∫–æ—Ñ–µ 23",
        "22 –æ–∫—Ç—è–±—Ä—è –ê–º–∞–∑–æ–Ω –ø—Ä–∞–π–º –ø–æ–¥–ø–∏—Å–∫–∞ 50",
        "23 –æ–∫—Ç—è–±—Ä—è –∫–æ—Ñ–µ 30",
        "23 –æ–∫—Ç—è–±—Ä—è —Ñ—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ 230 –ø–æ–¥–ø–∏—Å–∫–∞",
        "23 –æ–∫—Ç—è–±—Ä—è ClubMed 11804",
        "23 –æ–∫—Ç—è–±—Ä—è –∫–Ω–∏–≥–∞ 48 –∑–∞–∫–æ–Ω–æ–≤ –≤–ª–∞—Å—Ç–∏ –∞–º–∞–∑–æ–Ω 13.29 –¥–æ–ª–ª–∞—Ä—ã",
        "24 –æ–∫—Ç—è–±—Ä—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ –≤–µ—á–µ—Ä–∏–Ω–∫–∞ —Ñ—Ä—É–∫—Ç—ã bday party 418",
        "24 –æ–∫—Ç—è–±—Ä—è –∞—Ä–µ–Ω–¥–∞ —Å–∞–º–æ–∫–∞—Ç–∞ 28",
        "24 –æ–∫—Ç—è–±—Ä—è –∞—Ä–µ–Ω–¥–∞ —Å–∞–º–æ–∫–∞—Ç–∞ 38",
        "24 –æ–∫—Ç—è–±—Ä—è –¥–æ—Å—Ç–∞–≤–∫–∞ –≥–æ—Ç–æ–≤–æ–π –µ–¥—ã 410",
        "24 –æ–∫—Ç—è–±—Ä—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ –≤–∏–Ω–æ bday party 690",
        "24 –æ–∫—Ç—è–±—Ä—è —Å—É–ø–µ—Ä –º–∞—Ä–∫–µ—Ç 55",
        "24 –æ–∫—Ç—è–±—Ä—è –≤–æ–ª—å—Ç –ø–æ–¥–ø–∏—Å–∫–∞ 49",
        "24 –æ–∫—Ç—è–±—Ä—è knafe bday party 336",
        "24 –æ–∫—Ç—è–±—Ä—è –∫–æ—Ñ–µ 41"
    ]
    
    print("üîÑ Parsing transactions...")
    
    # –ü–∞—Ä—Å–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transactions = []
    for text in transactions_text:
        transaction = parse_historical_transaction(text)
        if transaction:
            transactions.append(transaction)
            print(f"üìù Parsed: {text}")
        else:
            print(f"‚ùå Failed to parse: {text}")
    
    print(f"\n‚úÖ Parsed {len(transactions)} transactions")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä
    print("\nü§ñ Initializing categorizer...")
    categorizer = TransactionCategorizer(config.OPENAI_API_KEY)
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    print("\nüè∑Ô∏è Categorizing transactions...")
    categorize_transactions(transactions, categorizer)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets
    print("\nüìä Connecting to Google Sheets...")
    sheets_manager = GoogleSheetsManager(
        config.GOOGLE_CREDENTIALS_FILE,
        config.SPREADSHEET_NAME
    )
    
    if not sheets_manager.connect():
        print("‚ùå Failed to connect to Google Sheets")
        return
    
    print("‚úÖ Connected to Google Sheets")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    print(f"\nüì§ Uploading {len(transactions)} transactions...")
    
    success = sheets_manager.add_transactions_batch(transactions)
    
    if success:
        print("‚úÖ All transactions uploaded successfully!")
        print(f"üìä Check your sheet: {sheets_manager.get_spreadsheet_url()}")
    else:
        print("‚ùå Failed to upload transactions")

if __name__ == '__main__':
    main()
